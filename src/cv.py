import numpy as np
import pandas as pd
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error

import warnings

warnings.simplefilter('ignore')

# Validation function
n_folds = 5


def cv_predict(model, X, y):
    kf = KFold(n_folds, shuffle=True, random_state=42)

    cv_preds = pd.DataFrame(index=X.index, columns=['y', 'yhat', 'fold'])

    i = 1
    print('Fold: ')
    for train_idx, test_idx in kf.split(X, y):
        print(i, end=' ')
        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]
        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]

        model.fit(X_train, y_train)

        # Predict and invert log+1
        cv_preds.loc[X_test.index, 'yhat'] = np.exp(model.predict(X_test)) - 1

        # Invert log+1 on target
        cv_preds.loc[X_test.index, 'y'] = np.exp(y_test) - 1

        cv_preds.loc[X_test.index, 'fold'] = i

        i += 1

    return cv_preds


def cv_score(model, X, y, n_folds, reverse_log=False, verbose=False, preproc=None):
    kf = KFold(n_folds, shuffle=True, random_state=42)

    i = 1
    cv_scores = []
    for train_idx, test_idx in kf.split(X, y):
        if verbose:
            print('Fold: ',i)
            
        X_train, X_test = X.iloc[train_idx], X.iloc[test_idx]
        y_train, y_test = y.iloc[train_idx], y.iloc[test_idx]
        
        if preproc:
            X_train = preproc.fit_transform(X_train, y_train)
            X_test = preproc.transform(X_test)

        model.fit(X_train, y_train)

        preds = model.predict(X_test)

        if reverse_log:
            preds = np.exp(preds) - 1
            y_test = np.exp(y_test) - 1

        cv_scores.append(np.sqrt(mean_squared_error(y_test, preds)))
        i += 1

    return np.array(cv_scores)
