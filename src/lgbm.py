import pickle
import lightgbm as lgb
import pandas as pd
import numpy as np
from category_encoders import TargetEncoder
from datetime import datetime

baseline_params = {
    "objective": "regression",
    "metric": "rmse",
    "learning_rate": 0.02,
    "n_estimators": 1000,
    "max_depth": 9,
    "feature_fraction": 0.75,
    "bagging_fraction": 0.75,
    "bagging_freq": 2,
    "lambda": 0.1,
    "num_threads": 30
}


def load_data(version):
    train = pd.read_csv(f'../data/modelling/train_{version}.csv', index_col=0)
    test = pd.read_csv(f'../data/modelling/test_{version}.csv', index_col=0)

    with open('../data/modelling/hold_out_indexes.p', 'rb') as f:
        holdout_indexes = pickle.load(f)

    val = train.loc[holdout_indexes]

    train = train.drop(holdout_indexes)

    print('Train: ', train.shape)
    print('Val: ', val.shape)
    print('Test: ', test.shape)

    return train, val, test


def run(dataset_version, params):
    train, val, test = load_data(dataset_version)

    X = train.drop(columns='target_pct_vunerable')
    y = train.target_pct_vunerable

    # Will use this as local val score and compare with CV score
    X_val = val.drop(columns='target_pct_vunerable')
    y_val = val.target_pct_vunerable

    X_test = test.copy()

    # Create categorical encoder
    cat_cols = X.select_dtypes('object').columns.tolist()
    enc = TargetEncoder(cols=cat_cols)

    # Tune no. estimators on validation set
    X_train = enc.fit_transform(X, y)
    X_val = enc.transform(X_val)

    model = lgb.LGBMRegressor(**params)
    model.fit(X_train, y, eval_set=[(X_val, y_val)],
              eval_metric='rmse', verbose=25, early_stopping_rounds=50)

    params.update({'n_estimators': model.best_iteration_})

    # Combine validation set back with train set
    data = pd.concat([train, val], axis=0, sort=False)

    X = data.drop(columns='target_pct_vunerable')
    y = data.target_pct_vunerable

    X = enc.fit_transform(X, y)

    model = lgb.LGBMRegressor(**params)
    model.fit(X, y)

    # Make a submission file
    X_test = enc.transform(X_test)

    test_preds = model.predict(X_test)

    sub = pd.DataFrame({'ward': X_test.index, y.name: test_preds})

    now = datetime.now()
    fname = f'lgbm_{data_version}_{now.year}-{now.month}-{now.day}--{now.hour}-{now.minute}.csv'
    fname

    sub.to_csv('../data/submissions/lgbm_best_reproduce.csv', index=False)
